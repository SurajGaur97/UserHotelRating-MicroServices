package com.lcwd.user.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.lcwd.user.dto.UserResponceDto;
import com.lcwd.user.entities.Rating;
import com.lcwd.user.entities.User;
import com.lcwd.user.services.UserService;

import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import io.github.resilience4j.retry.annotation.Retry;

@RestController
@RequestMapping("/users")
public class UserController {
	private Logger logger = LoggerFactory.getLogger(UserController.class);

	@Autowired
	private UserService userService;

	@PostMapping("createUser")
	public ResponseEntity<User> createUser(@RequestBody User user) {

		User user1 = userService.saveUser(user);
		return ResponseEntity.status(HttpStatus.CREATED).body(user1);

	}

	@GetMapping("getAllUsers")
	public ResponseEntity<List<User>> getAllUsers() {

		List<User> users = userService.getAllUser();
		return ResponseEntity.status(HttpStatus.OK).body(users);

	}

	@GetMapping("getUsers")
	public ResponseEntity<User> getAllUsers(@RequestParam String userId) {

		User users = userService.getUser(userId);
		return ResponseEntity.status(HttpStatus.OK).body(users);

	}

	/**
	 * @apiNote It is an example of CircuitBreaker implementation.
	 *          For CircuitBreaker implementation we need
	 *          1.dependency of resilience4j,
	 *          2.configuration(using java or application.yml files) and
	 *          3.annotation @CircuitBreaker for implementing CircuitBreaker
	 * @param userId
	 * @return
	 */
	@GetMapping("getAllUserDetails")
	@CircuitBreaker(name = "ratingHotelBreaker", fallbackMethod = "ratingHotelFallback")
	public ResponseEntity<UserResponceDto> getAllUserDetails(@RequestParam String userId) {
		UserResponceDto users = userService.getAllUserDetails(userId);
		return ResponseEntity.status(HttpStatus.OK).body(users);
	}

	/**
	 * @apiNote It is example of Retryable API implementation. 
	 * 			For CircuitBreaker implementation we need 
	 *          1.dependency of resilience4j,
	 *          2.configuration(using java or application.yml files) and
	 *          3.annotation @Retry for implementing Retryable
	 * @param userId
	 * @return
	 */
	int retryCount = 1;
	@GetMapping("getAllUserDetails")
	@Retry(name = "ratingHotelRetryable", fallbackMethod = "ratingHotelFallback")
	public ResponseEntity<UserResponceDto> getAllUserRetryableEg(@RequestParam String userId) {
		// for counting each request by @Retry annotation automatically.
		logger.info("Retry Count: {}", retryCount);
		retryCount++;

		UserResponceDto users = userService.getAllUserDetails(userId);
		return ResponseEntity.status(HttpStatus.OK).body(users);
	}

	/**
	 * @apiNote This method for which to called after failure of Breaker method (as
	 *          above defined) (it may use AOP dependency :- thought by me.)
	 * @param userId
	 * @param ex
	 * @return ResponseEntity<User>
	 */
	public ResponseEntity<User> ratingHotelFallback(@RequestParam String userId, Exception ex) {
		logger.info("Fallback is executed because service is down: " + ex.getMessage());

		User user = User.builder().name("Dummy").email("dummy@email.com").about("This is dummy user").id("2342")
				.build();

		return ResponseEntity.status(HttpStatus.OK).body(user);
	}

	/**
	 * @apiNote Creating rating through OpenFeigh Client from User Service
	 * @param rating
	 * @return
	 */
	@PostMapping("createRating")
	public ResponseEntity<Rating> createUser(@RequestBody Rating rating) {

		Rating rating1 = userService.saveRating(rating);
		return ResponseEntity.status(HttpStatus.CREATED).body(rating1);

	}

}

package com.lcwd.user.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.lcwd.user.dto.UserResponceDto;
import com.lcwd.user.entities.Rating;
import com.lcwd.user.entities.User;
import com.lcwd.user.services.UserService;

import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;

@RestController
@RequestMapping("/users")
public class UserController {
	private Logger logger = LoggerFactory.getLogger(UserController.class);
	
	@Autowired
	private UserService userService;

	@PostMapping("createUser")
	public ResponseEntity<User> createUser(@RequestBody User user) {
		
		User user1 = userService.saveUser(user);
		return ResponseEntity.status(HttpStatus.CREATED).body(user1);
		
	}
	
	@GetMapping("getAllUsers")
	public ResponseEntity<List<User>> getAllUsers() {
		
		List<User> users = userService.getAllUser();
		return ResponseEntity.status(HttpStatus.OK).body(users);
		
	}
	
	@GetMapping("getUsers")
	public ResponseEntity<User> getAllUsers(@RequestParam String userId) {
		
		User users = userService.getUser(userId);
		return ResponseEntity.status(HttpStatus.OK).body(users);
		
	}
	
	@GetMapping("getAllUserDetails")
	@CircuitBreaker(name = "ratingHotelBreaker", fallbackMethod = "ratingHotelFallback")
	public ResponseEntity<UserResponceDto> getAllUserDetails(@RequestParam String userId) {
		
		UserResponceDto users = userService.getAllUserDetails(userId);
		return ResponseEntity.status(HttpStatus.OK).body(users);
		
	}
	
	//for which will be called after failure of breaker method (it may use AOP dependency :- thought by me.)
	public ResponseEntity<User> ratingHotelFallback(@RequestParam String userId, Exception ex) {
		logger.info("Fallback is executed because service is down: " + ex.getMessage());
		
		User user = User.builder()
				.name("Dummy")
				.email("dummy@email.com")
				.about("This is dummy user")
				.id("2342")
				.build();
		
		return ResponseEntity.status(HttpStatus.OK).body(user);
	}
	
	
	/**
	 * @apiNote Creating rating through OpenFeigh Client from User Service
	 * @param rating
	 * @return
	 */
	@PostMapping("createRating")
	public ResponseEntity<Rating> createUser(@RequestBody Rating rating) {
		
		Rating rating1 = userService.saveRating(rating);
		return ResponseEntity.status(HttpStatus.CREATED).body(rating1);
		
	}
	
}
